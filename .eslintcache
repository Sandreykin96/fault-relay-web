[{"C:\\Users\\Юрий\\fault-relay-web\\src\\index.tsx":"1","C:\\Users\\Юрий\\fault-relay-web\\src\\reportWebVitals.ts":"2","C:\\Users\\Юрий\\fault-relay-web\\src\\App.tsx":"3","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorNodeModel.ts":"4","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorPortFactory.ts":"5","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorPortModel.ts":"6","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerNodeModel.ts":"7","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerPortFactory.ts":"8","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerPortModel.ts":"9","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\TrayWidget.tsx":"10","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\TrayItemWidget.tsx":"11","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorNodeFactory.tsx":"12","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerNodeFactory.tsx":"13","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\icons\\Icons.tsx":"14","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorNodeWidget.tsx":"15","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerNodeWidget.tsx":"16","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerNodeModel3.ts":"17","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerPortModel3.ts":"18","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerPortFactory3.ts":"19","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerNodeFactory3.tsx":"20","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerNodeWidget3.tsx":"21"},{"size":517,"mtime":1610189222718,"results":"22","hashOfConfig":"23"},{"size":440,"mtime":1610189222719,"results":"24","hashOfConfig":"23"},{"size":8324,"mtime":1610194928228,"results":"25","hashOfConfig":"23"},{"size":438,"mtime":1610189222711,"results":"26","hashOfConfig":"23"},{"size":392,"mtime":1610189222712,"results":"27","hashOfConfig":"23"},{"size":637,"mtime":1610189222713,"results":"28","hashOfConfig":"23"},{"size":351,"mtime":1610189222715,"results":"29","hashOfConfig":"23"},{"size":394,"mtime":1610189222716,"results":"30","hashOfConfig":"23"},{"size":624,"mtime":1610189222717,"results":"31","hashOfConfig":"23"},{"size":202,"mtime":1610189222710,"results":"32","hashOfConfig":"23"},{"size":697,"mtime":1610189222709,"results":"33","hashOfConfig":"23"},{"size":536,"mtime":1610189222711,"results":"34","hashOfConfig":"23"},{"size":552,"mtime":1610191908327,"results":"35","hashOfConfig":"23"},{"size":6523,"mtime":1610189222714,"results":"36","hashOfConfig":"23"},{"size":1988,"mtime":1610189222712,"results":"37","hashOfConfig":"23"},{"size":1629,"mtime":1610189222716,"results":"38","hashOfConfig":"23"},{"size":422,"mtime":1610195656455,"results":"39","hashOfConfig":"23"},{"size":646,"mtime":1610195621823,"results":"40","hashOfConfig":"23"},{"size":395,"mtime":1610194888977,"results":"41","hashOfConfig":"23"},{"size":560,"mtime":1610194690899,"results":"42","hashOfConfig":"23"},{"size":1567,"mtime":1610196148746,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1t390a3",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\Юрий\\fault-relay-web\\src\\index.tsx",[],["92","93"],"C:\\Users\\Юрий\\fault-relay-web\\src\\reportWebVitals.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\App.tsx",["94","95","96","97","98","99","100","101"],"import React from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport createEngine, {\r\n  DefaultLinkModel,\r\n  DefaultNodeModel,\r\n  DiagramModel,\r\n} from \"@projectstorm/react-diagrams\";\r\nimport * as SRD from \"@projectstorm/react-diagrams\";\r\nimport \"./styles.css\";\r\nimport { TrayWidget } from \"./components/TrayWidget\";\r\nimport { TrayItemWidget } from \"./components/TrayItemWidget\";\r\n\r\nimport { GeneratorNodeModel } from \"./components/generator-node/GeneratorNodeModel\";\r\nimport { GeneratorNodeFactory } from \"./components/generator-node/GeneratorNodeFactory\";\r\nimport { GeneratorPortFactory } from \"./components/generator-node/GeneratorPortFactory\";\r\nimport { GeneratorPortModel } from \"./components/generator-node/GeneratorPortModel\";\r\n\r\nimport { TransformerNodeModel } from \"./components/transformer-node/TransformerNodeModel\";\r\nimport { TransformerNodeFactory } from \"./components/transformer-node/TransformerNodeFactory\";\r\nimport { TransformerPortFactory } from \"./components/transformer-node/TransformerPortFactory\";\r\nimport { TransformerPortModel } from \"./components/transformer-node/TransformerPortModel\";\r\n\r\n//добавил для трансформатора 3\r\nimport { TransformerNodeModel3 } from \"./components/transformer-node 3/TransformerNodeModel3\";\r\nimport { TransformerNodeFactory3 } from \"./components/transformer-node 3/TransformerNodeFactory3\";\r\nimport { TransformerPortFactory3 } from \"./components/transformer-node 3/TransformerPortFactory3\";\r\nimport { TransformerPortModel3 } from \"./components/transformer-node 3/TransformerPortModel3\";\r\n\r\n//Изменения в app.tsx которые нужно сделать указаны в комментраниях на русском. \r\n//Нужно для каждого из этих элементов сделать наподобие transformer=node или generator-node\r\n//Пока что нужно в папке трансформер ноде 3 измененить все файлы. по факту тебе будет нужно переименовать все файлы а также отредактировать \r\n//Точно так же импортировать 4 штуки: ТNodeModel, NodeFactory, PortFacrory, PortModel Для каждого элемента\r\n\r\n\r\nimport {Connector, GeneratorIcon, TransformerIcon, \r\n  ThreeTransformerIcon, Switch, Reactor, \r\n  DoubleReactor,Divader, Line, Ground, Load} from  \"./components/icons/Icons\"\r\n\r\nexport class Application {\r\n  protected activeModel: SRD.DiagramModel;\r\n  protected diagramEngine: SRD.DiagramEngine;\r\n\r\n  constructor() {\r\n    this.diagramEngine = new SRD.DiagramEngine();\r\n    this.diagramEngine.installDefaultFactories();\r\n\r\n    // register some other factories as well\r\n    this.diagramEngine.registerPortFactory(new GeneratorPortFactory(\"generator\", config => new GeneratorPortModel()));\r\n    this.diagramEngine.registerNodeFactory(new GeneratorNodeFactory());\r\n    this.diagramEngine.registerPortFactory(new TransformerPortFactory(\"transformer\", config => new TransformerPortModel()));\r\n    this.diagramEngine.registerNodeFactory(new TransformerNodeFactory());\r\n\r\n    this.diagramEngine.registerPortFactory(new TransformerPortFactory3(\"transformer3\", config => new TransformerPortModel3()));\r\n    this.diagramEngine.registerNodeFactory(new TransformerNodeFactory3());\r\n    //Тут добавить по образу и подобию  PortFactory и NodeFactory\r\n\r\n\r\n    this.activeModel = new SRD.DiagramModel();\r\n  }\r\n\r\n  public newModel() {\r\n    this.activeModel = new SRD.DiagramModel();\r\n    this.diagramEngine.setDiagramModel(this.activeModel);\r\n  }\r\n\r\n  public getActiveDiagram(): SRD.DiagramModel {\r\n    return this.activeModel;\r\n  }\r\n\r\n  public getDiagramEngine(): SRD.DiagramEngine {\r\n    \r\n    return this.diagramEngine;\r\n  }\r\n}\r\n\r\nexport interface BodyWidgetProps {\r\n  app: Application;\r\n}\r\n\r\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\r\n  render() {\r\n    return (\r\n      <div className=\"Content\">\r\n        <div style = {{marginLeft : 10, marginRight : 10, height: 680, overflowY:'scroll'}}>\r\n        <TrayWidget>\r\n          <TrayItemWidget\r\n            model={{ type: \"generator\" }}\r\n            name=\"Генератор\"\r\n            color=\"#9f1d87\"\r\n            icon = {GeneratorIcon()}\r\n          />\r\n          <TrayItemWidget\r\n            model={{ type: \"transformer\" }}\r\n            name=\"Двухобмоточный трансформатор\"\r\n            color=\"#9f1d87\"\r\n            icon = {TransformerIcon()}\r\n          />\r\n           <TrayItemWidget\r\n            model={{ type: \"transformer3\" }}\r\n            name=\"Трехобмоточный трансформатор\"\r\n            color=\"#9f1d87\"\r\n            icon = {ThreeTransformerIcon()}\r\n          />\r\n           <TrayItemWidget\r\n            model={{ type: \"switch\" }}\r\n            name=\"Выключатель\"\r\n            color=\"#9f1d87\"\r\n            icon = {Switch()}\r\n          />\r\n          <TrayItemWidget\r\n            model={{ type: \"reactor\" }}\r\n            name=\"Реактор\"\r\n            color=\"#9f1d87\"\r\n            icon = {Reactor()}\r\n          />\r\n          <TrayItemWidget\r\n            model={{ type: \"dobulereactor\" }}\r\n            name=\"Сдвоенный реактор\"\r\n            color=\"#9f1d87\"\r\n            icon = {DoubleReactor()}\r\n          />\r\n          <TrayItemWidget\r\n            model={{ type: \"dobulereactor\" }}\r\n            name=\"Разъединитель\"\r\n            color=\"#9f1d87\"\r\n            icon = {Divader()}\r\n          />\r\n           <TrayItemWidget\r\n            model={{ type: \"dobulereactor\" }}\r\n            name=\"Линия\"\r\n            color=\"#9f1d87\"\r\n            icon = {Line()}\r\n          />\r\n          <TrayItemWidget\r\n            model={{ type: \"dobulereactor\" }}\r\n            name=\"Земля\"\r\n            color=\"#9f1d87\"\r\n            icon = {Ground()}\r\n          />\r\n\r\n          <TrayItemWidget\r\n            model={{ type: \"dobulereactor\" }}\r\n            name=\"Шина\"\r\n            color=\"#9f1d87\"\r\n            icon = {Connector()}\r\n          />\r\n\r\n          <TrayItemWidget\r\n            model={{ type: \"dobulereactor\" }}\r\n            name=\"Нагрузка\"\r\n            color=\"#9f1d87\"\r\n            icon = {Load()}\r\n          />\r\n        </TrayWidget>\r\n        \r\n        </div>\r\n        <div\r\n          className=\"Layer\"\r\n          onDrop={(event: {\r\n            dataTransfer: { getData: (arg0: string) => string };\r\n          }) => {\r\n            var data = JSON.parse(\r\n              event.dataTransfer.getData(\"storm-diagram-node\")\r\n            );\r\n            var nodesCount = _.keys(\r\n              this.props.app.getDiagramEngine().getDiagramModel().getNodes()\r\n            ).length;\r\n\r\n            console.log(\"Data type = \" + data.type)\r\n\r\n            var node: any = null;\r\n           \r\n            if (data.type == \"generator\") {\r\n              node = new GeneratorNodeModel();\r\n            } if (data.type == \"transformer\") {\r\n              node = new TransformerNodeModel();\r\n            }if (data.type == \"transformer3\") {\r\n              node = new TransformerNodeModel3();\r\n            }  \r\n\r\n            //Тут добавить условия, типа if(data.type==\"reactor\"{node = new ReactorNodeModel()})\r\n           //Тем самым сработает DrugAndDrop. Больше в этом компоненте ничего не трогать\r\n\r\n\r\n            var point = this.props.app\r\n              .getDiagramEngine()\r\n              .getRelativeMousePoint(event);\r\n            node.setPosition(point.x, point.y);\r\n            this.props.app.getDiagramEngine().getDiagramModel().addNode(node);\r\n            this.forceUpdate();\r\n          }}\r\n          onDragOver={(event: { preventDefault: () => void }) => {\r\n            event.preventDefault();\r\n          }}\r\n        >\r\n          <SRD.DiagramWidget\r\n            className=\"srd-demo-canvas\"\r\n            smartRouting={true}\r\n            diagramEngine={this.props.app.getDiagramEngine()}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  var app = new Application();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style = {{marginBottom : 20, fontSize : 30 }}>\r\n        FaultRelay\r\n      </div>\r\n      <BodyWidget app={app} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorNodeModel.ts",["102"],"import { NodeModel, DefaultNodeModel } from \"@projectstorm/react-diagrams\";\r\nimport { GeneratorPortModel } from \"./GeneratorPortModel\";\r\n\r\nexport class GeneratorNodeModel extends NodeModel {\r\n\tconstructor() {\r\n\t\tsuper(\"generator\");\r\n\t\tthis.addPort(new GeneratorPortModel(\"top\"));\r\n\t\tthis.addPort(new GeneratorPortModel(\"left\"));\r\n\t\tthis.addPort(new GeneratorPortModel(\"bottom\"));\r\n\t\tthis.addPort(new GeneratorPortModel(\"right\"));\r\n\t}\r\n}\r\n","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorPortFactory.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorPortModel.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerNodeModel.ts",["103"],"import { NodeModel, DefaultNodeModel } from \"@projectstorm/react-diagrams\";\r\nimport { TransformerPortModel } from \"./TransformerPortModel\";\r\n\r\nexport class TransformerNodeModel extends NodeModel {\r\n\tconstructor() {\r\n\t\tsuper(\"transformer\");\r\n\t\tthis.addPort(new TransformerPortModel(\"top\"));\r\n\t\tthis.addPort(new TransformerPortModel(\"bottom\"));\r\n\t}\r\n}\r\n","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerPortFactory.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerPortModel.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\TrayWidget.tsx",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\TrayItemWidget.tsx",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorNodeFactory.tsx",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerNodeFactory.tsx",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\icons\\Icons.tsx",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\generator-node\\GeneratorNodeWidget.tsx",["104"],"import * as React from \"react\";\r\nimport { GeneratorNodeModel } from \"./GeneratorNodeModel\";\r\nimport { PortWidget } from \"@projectstorm/react-diagrams\";\r\n\r\nexport interface GeneratorNodeWidgetProps {\r\n\tnode: GeneratorNodeModel;\r\n\tsize?: number;\r\n}\r\n\r\nexport interface GeneratorNodeWidgetState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class GeneratorNodeWidget extends React.Component<GeneratorNodeWidgetProps, GeneratorNodeWidgetState> {\r\n\tpublic static defaultProps: GeneratorNodeWidgetProps = {\r\n\t\tsize: 150,\r\n\t\tnode: new GeneratorNodeModel\r\n\t};\r\n\r\n\tconstructor(props: GeneratorNodeWidgetProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n      <div>\r\n        <svg width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<circle cx=\"28\" cy=\"28\" r=\"26.5\" stroke=\"#55D162\" stroke-width=\"3\"/>\r\n<path d=\"M12 27.7727C18.6 37.2398 26.0938 31.7174 29.0156 27.7727C36.4406 19.1289 42.7656 24.1711 45 27.7727\" stroke=\"#32C95C\" stroke-width=\"3\"/>\r\n</svg>\r\n\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 50 / 2 - 6,\r\n\t\t\tleft: -6,\r\n          }}\r\n        >\r\n          <PortWidget name=\"left\" node={this.props.node}/>\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            left: 50 / 2 - 3,\r\n            top: -10,\r\n          }}\r\n        >\r\n          <PortWidget name=\"top\" node={this.props.node} />\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 10,\r\n            left: 50,\r\n            top: 50 / 2 - 6,\r\n          }}\r\n        >\r\n          <PortWidget name=\"right\" node={this.props.node} />\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 10,\r\n            left: 50 / 2 - 3,\r\n            top: 50,\r\n          }}\r\n        >\r\n          <PortWidget name=\"bottom\" node={this.props.node} />\r\n        </div>\r\n      </div>\r\n    );\r\n\t}\r\n}\r\n","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node\\TransformerNodeWidget.tsx",["105"],"import * as React from \"react\";\r\nimport { TransformerNodeModel } from \"./TransformerNodeModel\";\r\nimport { PortWidget } from \"@projectstorm/react-diagrams\";\r\n\r\nexport interface TransformerNodeWidgetProps {\r\n\tnode: TransformerNodeModel;\r\n\tsize?: number;\r\n}\r\n\r\nexport interface TransformerNodeWidgetState {}\r\n\r\nexport class TransformerNodeWidget extends React.Component<TransformerNodeWidgetProps, TransformerNodeWidgetState> {\r\n\tpublic static defaultProps: TransformerNodeWidgetProps = {\r\n\t\tsize: 150,\r\n\t\tnode: new TransformerNodeModel\r\n\t};\r\n\r\n\tconstructor(props: TransformerNodeWidgetProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n      <div>\r\n        <svg\r\n          width=\"50\"\r\n          height=\"75\"\r\n          viewBox=\"0 0 50 75\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <circle cx=\"25\" cy=\"25\" r=\"23.5\" stroke=\"#55D162\" stroke-width=\"3\" />\r\n          <circle cx=\"25\" cy=\"25\" r=\"23.5\" stroke=\"#55D162\" stroke-width=\"3\" />\r\n          <circle cx=\"25\" cy=\"50\" r=\"23.5\" stroke=\"#55D162\" stroke-width=\"3\" />\r\n        </svg>\r\n\r\n        \r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            left: 50 / 2 - 7,\r\n            top: -10,\r\n          }}\r\n        >\r\n          <PortWidget name=\"top\" node={this.props.node} />\r\n        </div>\r\n        \r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 10,\r\n            left: 50 / 2 - 7,\r\n            top: 70,\r\n          }}\r\n        >\r\n          <PortWidget name=\"bottom\" node={this.props.node} />\r\n        </div>\r\n      </div>\r\n    );\r\n\t}\r\n}\r\n","C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerNodeModel3.ts",["106"],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerPortModel3.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerPortFactory3.ts",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerNodeFactory3.tsx",[],"C:\\Users\\Юрий\\fault-relay-web\\src\\components\\transformer-node 3\\TransformerNodeWidget3.tsx",["107"],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":20},{"ruleId":"112","severity":1,"message":"116","line":4,"column":3,"nodeType":"114","messageId":"115","endLine":4,"endColumn":19},{"ruleId":"112","severity":1,"message":"117","line":5,"column":3,"nodeType":"114","messageId":"115","endLine":5,"endColumn":19},{"ruleId":"112","severity":1,"message":"118","line":6,"column":3,"nodeType":"114","messageId":"115","endLine":6,"endColumn":15},{"ruleId":"112","severity":1,"message":"119","line":165,"column":17,"nodeType":"114","messageId":"115","endLine":165,"endColumn":27},{"ruleId":"120","severity":1,"message":"121","line":173,"column":27,"nodeType":"122","messageId":"123","endLine":173,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":175,"column":29,"nodeType":"122","messageId":"123","endLine":175,"endColumn":31},{"ruleId":"120","severity":1,"message":"121","line":177,"column":28,"nodeType":"122","messageId":"123","endLine":177,"endColumn":30},{"ruleId":"112","severity":1,"message":"117","line":1,"column":21,"nodeType":"114","messageId":"115","endLine":1,"endColumn":37},{"ruleId":"112","severity":1,"message":"117","line":1,"column":21,"nodeType":"114","messageId":"115","endLine":1,"endColumn":37},{"ruleId":"124","severity":1,"message":"125","line":18,"column":9,"nodeType":"126","messageId":"127","endLine":18,"endColumn":31,"fix":"128"},{"ruleId":"124","severity":1,"message":"125","line":15,"column":9,"nodeType":"126","messageId":"127","endLine":15,"endColumn":33,"fix":"129"},{"ruleId":"112","severity":1,"message":"117","line":1,"column":21,"nodeType":"114","messageId":"115","endLine":1,"endColumn":37},{"ruleId":"124","severity":1,"message":"125","line":16,"column":9,"nodeType":"126","messageId":"127","endLine":16,"endColumn":34,"fix":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"@typescript-eslint/no-unused-vars","'createEngine' is defined but never used.","Identifier","unusedVar","'DefaultLinkModel' is defined but never used.","'DefaultNodeModel' is defined but never used.","'DiagramModel' is defined but never used.","'nodesCount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"133","text":"134"},{"range":"135","text":"134"},{"range":"136","text":"134"},"no-global-assign","no-unsafe-negation",[549,549],"()",[533,533],[600,600]]